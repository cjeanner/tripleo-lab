---
- name: run tasks as virt_user user
  become: true
  become_user: "{{ virt_user }}"
  tags:
    - lab
    - nat-vm
  block:
    - name: Set base image name for actual lab
      set_fact:
        natVmImg: >-
          {%- if centos_variant == "stream" -%}
          centos-8-stream.qcow2
          {%- else -%}
          centos-8.qcow2
          {%- endif -%}

    - name: create nat-vm image based on centos-8
      tags:
        - images
      command: |
        qemu-img create -o backing_file=../images/{{ natVmImg|trim }},backing_fmt=qcow2 -f qcow2 "{{ vm_prefix }}-nat-vm.qcow2" "{{ nat_vm_size|default('20G') }}"
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-nat-vm.qcow2"
        chdir: "{{ basedir }}/workload"

    - name: nat-vm image settings
      shell: |
        export LIBGUESTFS_BACKEND=direct
        virt-sysprep -a "{{basedir}}/workload/{{vm_prefix}}-nat-vm.qcow2" \
          --firstboot-command "systemctl enable --now acpid" \
          --firstboot-command "growpart /dev/sda 1" \
          --firstboot-command "xfs_growfs /" \
          --network \
          --uninstall cloud-init \
          --hostname "{{ vm_prefix }}-nat-vm.{{ domain }}" \
          --selinux-relabel \
          --install acpid,iptables \
          --ssh-inject root:file:{{ basedir }}/.ssh/authorized_keys &> "{{basedir}}/workload/{{vm_prefix}}-nat-vm.qcow2.done"
      args:
        creates: "{{basedir}}/workload/{{vm_prefix}}-nat-vm.qcow2.done"

    - name: define nat-vm
      virt:
        command: define
        xml: "{{ lookup('template', 'nat-vm.xml.j2') }}"
        uri: "qemu:///system"

    - name: start nat-vm
      virt:
        name: "{{ vm_prefix }}-nat-vm"
        state: running
        uri: "qemu:///system"

    - name: get nat-vm IP address
      shell: |
        virsh --connect qemu:///system domifaddr "{{ vm_prefix }}-nat-vm" | \
        awk '/ipv4/ {print $4}' | head -n1
      register: nat_vm_addr
      retries: "{{ node_retries | default(10) | int }}"
      delay: 10
      until:
        - nat_vm_addr.stdout != ""

- name: Export nat_vm IP address
  tags:
    - lab
    - nat-vm
  set_fact:
    nat_vm_addr_value: "{{ nat_vm_addr.stdout|replace('/24','') }}"
    cacheable: true

- name: inject config on ansible host
  tags:
    - lab
    - nat-vm
  local_action:
    module: blockinfile
    path: ~/.ssh/config
    marker: "## {mark} {{ vm_prefix }}-nat-vm"
    create: true
    mode: 0600
    block: |
      Host {{ vm_prefix }}-nat-vm {{ nat_vm_addr.stdout|replace('/24','') }}
        ProxyJump {{ virt_user }}@{{ ansible_host }}
        Hostname {{ nat_vm_addr.stdout|replace('/24','') }}
        User root
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null

- name: inject nat-vm into ansible inventory
  tags:
    - lab
    - nat-vm
  add_host:
    hostname: "nat-vm"
    ansible_host: "{{ nat_vm_addr.stdout|replace('/24','') }}"
    ansible_python_interpreter: /usr/libexec/platform-python
