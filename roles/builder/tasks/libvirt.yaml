- name: create overclouds range
  tags: always
  set_fact:
    overclouds_range: "{{ range(0, overclouds|int)|list }}"
- name: common tags
  tags:
    - libvirt
    - config
    - builder-bootstrap
  block:
    - name: Set nested KVM if wanted
      when: nested_kvm | default(False) | bool
      copy:
        dest: /etc/modprobe.d/nested-kvm.conf
        content: |
          options kvm-intel nested=1
          options kvm-amd nested=1

    - name: Create symlink if needed
      when:
        ansible_facts['distribution'] == 'Fedora'
      file:
        path: /usr/libexec/qemu-kvm
        state: link
        src: /usr/bin/qemu-kvm

- name: run tasks as virt_user user
  become: true
  become_user: "{{ virt_user }}"
  tags:
    - lab
    - domains
  block:
    - name: export LIBVIRT_DEFAULT_URI
      lineinfile:
        path: "{{ basedir }}/.bashrc"
        line: "export LIBVIRT_DEFAULT_URI='qemu:///system'"
    - name: export LIBGUESTFS_BACKEND
      lineinfile:
        path: "{{ basedir }}/.bashrc"
        line: "export LIBGUESTFS_BACKEND=direct"

    - name: get default network XML content
      slurp:
        src: /usr/share/libvirt/networks/default.xml
      register: default_net_xml

    - name: ensure default network is present
      community.libvirt.virt_net:
        command: define
        name: default
        xml: "{{ default_net_xml['content']|b64decode }}"

    - name: run default network
      community.libvirt.virt_net:
        command: create
        name: default
      ignore_errors: true

    - name: ensure network is active and autostart
      community.libvirt.virt_net:
        state: active
        autostart: true
        name: default

    - name: load ctlplane network
      community.libvirt.virt_net:
        command: define
        name: ctlplane
        xml: '{{ lookup("file", "virsh/networks/ctlplane.xml") }}'
      register: ctlplane_create

    - name: create ctlplane network
      when: ctlplane_create is changed
      community.libvirt.virt_net:
        command: create
        name: ctlplane

    - name: ensure ctlplane is active and autostart
      community.libvirt.virt_net:
        state: active
        autostart: true
        name: ctlplane

    - name: centos-7
      import_tasks: centos-7.yaml
      when:
        - base_image == 'centos'
        - os_version == 7

    - name: Modern CentOS
      import_tasks: centos-modern.yaml

    - name: are we re-deploying upon existing deploy
      find:
        path: "{{ basedir }}/workload/"
      register: deploy_exists

    - name: update image in-place
      when:
        - base_image == 'centos'
        - deploy_exists['files'] == []
      tags:
        - images
        - image-update
      shell: |
        export LIBGUESTFS_BACKEND=direct
        virt-sysprep -a "{{ basedir }}/images/{{ base_image_name }}" \
          --network \
          --uninstall cloud-init \
          --selinux-relabel \
          --truncate /etc/machine-id \
          --update

    - name: "Create workload images using either {{ base_image_name }} or empty disk"
      tags:
        - images
      shell: >-
        {%- if item.0.name is match('^undercloud') -%}
        test -f "{{ vm_prefix }}-{{ item.0.name }}.qcow2" && exit 0;
        qemu-img create -o backing_file=../images/{{ base_image_name }},backing_fmt=qcow2 -f qcow2 "{{ vm_prefix }}-{{ item.0.name }}.qcow2" "{{ item.0.disksize|default ('100') }}G";
        {%- else -%}
        test -f "{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}.qcow2" && exit 0;
        {%-   if item.0.autostart|default(false)|bool %}
        qemu-img create -o backing_file=../images/{{ base_image_name }},backing_fmt=qcow2 -f qcow2 "{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}.qcow2" "{{ item.0.disksize|default ('100') }}G";
        {%-   else %}
        qemu-img create -f qcow2 "{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}.qcow2" "{{ item.0.disksize|default ('100') }}G";
        {%-   endif -%}
        {%- endif -%}
      args:
        creates: >-
          {%- if item.0.name is match('^undercloud') -%}
          "{{ basedir }}/workload/{{ vm_prefix }}-{{ item.0.name }}.qcow2"
          {%- else -%}
          "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}.qcow2"
          {%- endif -%}
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|list }}"
      loop_control:
        label: "{{ item.0.name }}"

    - name: create undercloud swap file when needed
      register: undercloud_swap
      tags:
        - images
      command: "qemu-img create -f raw {{ vm_prefix }}-{{ item.name }}-swap.img {{ item.swap }}"
      when:
        - item.name is match('^undercloud')
        - item.swap is defined
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-{{ item.name }}-swap.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: create overcloud swap files when needed
      tags:
        - images
      command: "qemu-img create -f raw {{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}-swap.img {{ item.0.swap }}"
      when:
        - item.0.swap is defined
        - item.0.name is not match('^undercloud')
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}-swap.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|list }}"
      loop_control:
        label: "{{ item.0.name }}"

    - name: create OSD(s) for ceph instances if any
      tags:
        - images
      when:
        - item.0.0.name is match('^ceph-.*')
      command: "qemu-img create -f raw {{ vm_prefix }}-oc{{ item.0.1 }}-{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}.img 50G"
      args:
        creates:  "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.0.1 }}-{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|product(range(0, num_osds)|list)|list }}"
      loop_control:
        label: "{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}"
        index_var: disk_index

    - name: push proxy config if needed
      template:
        dest: "{{ basedir }}/configs/http_proxy.sh"
        src: http_proxy.j2
      when:
        - proxy_host is defined
