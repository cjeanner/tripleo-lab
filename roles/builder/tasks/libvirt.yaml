- name: create overclouds range
  tags: always
  set_fact:
    overclouds_range: "{{ range(0, overclouds|int)|list }}"
- name: common tags
  tags:
    - libvirt
    - config
    - builder-bootstrap
  block:
    - name: Set nested KVM if wanted
      when: nested_kvm | default(False) | bool
      copy:
        dest: /etc/modprobe.d/nested-kvm.conf
        content: |
          options kvm-intel nested=1
          options kvm-amd nested=1

    - name: create virt_user
      user:
        comment: "Virtual user for tripleo lab"
        create_home: true
        generate_ssh_key: true
        groups:
          - libvirt
          - kvm
          - qemu
        home: "{{ basedir }}"
        name: "{{ virt_user }}"
        shell: "/bin/bash"
        ssh_key_bits: 4096
        state: present

    - name: set virt_user home rights
      file:
        state: directory
        path: "{{ basedir }}"
        mode: 0750
        group: qemu

    - name: push authorized_keys
      copy:
        src: /root/.ssh/authorized_keys
        remote_src: true
        dest: "{{ basedir }}/.ssh/authorized_keys"
        group: "{{ virt_user }}"
        mode: 0600
        owner: "{{ virt_user }}"

    - name: push polkit config
      template:
        dest: /etc/polkit-1/rules.d/50-org.libvirt.unix.manage.rules
        src: "50-org.libvirt.unix.manage.rules.j2"
        group: root
        mode: 0644
        owner: root
        serole: object_r
        setype: etc_t
        seuser: system_u
    - name: create temp dir for virt_user
      file:
        path: "/home/{{ virt_user }}/.ansible/tmp"
        state: directory
        group: "{{ virt_user }}"
        mode: 0700
        owner: "{{ virt_user }}"

    - name: Create symlink if needed
      when:
        ansible_facts['distribution'] == 'Fedora'
      file:
        path: /usr/libexec/qemu-kvm
        state: link
        src: /usr/bin/qemu-kvm

- name: run tasks as virt_user user
  become: true
  become_user: "{{ virt_user }}"
  tags:
    - lab
    - domains
  block:
    - name: export LIBVIRT_DEFAULT_URI
      lineinfile:
        path: "{{ basedir }}/.bashrc"
        line: "export LIBVIRT_DEFAULT_URI='qemu:///system'"
    - name: export LIBGUESTFS_BACKEND
      lineinfile:
        path: "{{ basedir }}/.bashrc"
        line: "export LIBGUESTFS_BACKEND=direct"

    - name: get default network XML content
      slurp:
        src: /usr/share/libvirt/networks/default.xml
      register: default_net_xml

    - name: ensure default network is present
      virt_net:
        command: define
        name: default
        xml: "{{ default_net_xml['content'] }}"

    - name: run default network
      virt_net:
        command: create
        name: default
      ignore_errors: true

    - name: ensure network is active and autostart
      virt_net:
        state: active
        autostart: true
        name: default

    - name: load ctlplane network
      virt_net:
        command: define
        name: ctlplane
        xml: '{{ lookup("file", "virsh/networks/ctlplane.xml") }}'
      register: ctlplane_create

    - name: create ctlplane network
      when: ctlplane_create is changed
      virt_net:
        command: create
        name: ctlplane

    - name: ensure ctlplane is active and autostart
      virt_net:
        state: active
        autostart: true
        name: ctlplane

    - name: create some directories
      tags:
        - config
      file:
        state: directory
        group: qemu
        path: "{{ basedir }}/{{ item }}"
        mode: 02770
      with_items:
        - images
        - workload
        - configs

    - name: centos-7
      import_tasks: centos-7.yaml
      when:
        - base_image == 'centos'
        - os_version == 7

    - name: centos-8
      import_tasks: centos-8.yaml

    - name: are we re-deploying upon existing deploy
      find:
        path: "{{ basedir }}/workload/"
      register: deploy_exists

    - name: Set base image name for actual lab
      set_fact:
        vmImg: >-
          {%- if centos_variant == "stream" -%}
          centos-{{ os_version }}-stream.qcow2
          {%- else -%}
          centos-{{ os_version }}.qcow2
          {%- endif -%}

    - name: update image in-place
      when:
        - base_image == 'centos'
        - deploy_exists['files'] == []
      tags:
        - images
        - image-update
      shell: |
        export LIBGUESTFS_BACKEND=direct
        virt-sysprep -a "{{ basedir }}/images/{{ vmImg |trim}}" \
          --network \
          --uninstall cloud-init \
          --selinux-relabel \
          --update

    - name: create undercloud image based on centos
      when:
        - base_image == "centos"
        - item.name is match('^undercloud')
      tags:
        - images
      command: |
        qemu-img create -o backing_file=../images/{{ vmImg |trim}},backing_fmt=qcow2 -f qcow2 "{{ vm_prefix }}-{{ item.name }}.qcow2" "{{ item.disksize|default ('100') }}G"
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-{{ item.name }}.qcow2"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: create images based on RHEL
      when:
        - (base_image | lower) in ['rhel', 'redhat']
        - item.name is match('^undercloud')
      tags:
        - images
      command: |
        qemu-img create -o backing_file=../images/{{ rhel_image_name }},backing_fmt=qcow2 -f qcow2 "{{ vm_prefix }}-{{ item.name }}.qcow2" "{{ item.disksize|default ('100') }}G"
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-{{ item.name }}.qcow2"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: create undercloud swap file when needed
      tags:
        - images
      command: "qemu-img create -f raw {{ vm_prefix }}-{{ item.name }}-swap.img {{ item.swap }}"
      when:
        - item.name is match('^undercloud')
        - item.swap is defined
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-{{ item.name }}-swap.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"


    - name: create empty image for non-undercloud
      when:
        - item.0.name is not match('^undercloud')
      tags:
        - images
      command: |
        qemu-img create -f qcow2 "{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}".qcow2 "{{ item.0.disksize|default ('100') }}"G
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}.qcow2"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|list }}"
      loop_control:
        label: "oc{{ item.1 }}-{{ item.0.name }}"

    - name: create overcloud swap files when needed
      tags:
        - images
      command: "qemu-img create -f raw {{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}-swap.img {{ item.0.swap }}"
      when:
        - item.0.swap is defined
        - item.0.name is not match('^undercloud')
      args:
        creates: "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.1 }}-{{ item.0.name }}-swap.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|list }}"
      loop_control:
        label: "{{ item.0.name }}"

    - name: create OSD(s) for ceph instances if any
      tags:
        - images
      when:
        - item.0.0.name is match('^ceph-.*')
      command: "qemu-img create -f raw {{ vm_prefix }}-oc{{ item.0.1 }}-{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}.img 50G"
      args:
        creates:  "{{ basedir }}/workload/{{ vm_prefix }}-oc{{ item.0.1 }}-{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}.img"
        chdir: "{{ basedir }}/workload"
      loop: "{{ vms|product(overclouds_range)|product(range(0, num_osds)|list)|list }}"
      loop_control:
        label: "{{ item.0.0.name }}-osd-{{ disk_index % num_osds}}"
        index_var: disk_index

    - name: push proxy config if needed
      template:
        dest: "{{ basedir }}/configs/http_proxy.sh"
        src: http_proxy.j2
      when:
        - proxy_host is defined
